// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  phone                 String?  @unique
  username              String?  @unique
  passwordHash          String
  profilePictureUrl     String?
  status                String?
  about                 String?
  lastSeen              DateTime?
  isOnline              Boolean  @default(false)
  isVerified            Boolean  @default(false)
  isBlocked             Boolean  @default(false)
  privacySettings       String   @default("{\"lastSeen\": true, \"profilePicture\": true, \"status\": true}")
  notificationSettings  String   @default("{\"messages\": true, \"calls\": true, \"groups\": true}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  createdChats          Chat[]   @relation("ChatCreator")
  chatParticipants      ChatParticipant[]
  sentMessages          Message[]
  messageStatuses       MessageStatus[]
  messageReactions      MessageReaction[]
  userRelationships     UserRelationship[] @relation("UserRelationships")
  relatedUserRelationships UserRelationship[] @relation("RelatedUserRelationships")

  @@map("users")
}

model Chat {
  id          String   @id @default(cuid())
  type        String
  name        String?
  description String?
  avatarUrl   String?
  createdBy   String?
  isActive    Boolean  @default(true)
  settings    String   @default("{\"muteNotifications\": false, \"pinChat\": false}")
  metadata    String   @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User?    @relation("ChatCreator", fields: [createdBy], references: [id])
  participants ChatParticipant[]
  messages    Message[]

  @@map("chats")
}

model ChatParticipant {
  id                   String           @id @default(cuid())
  chatId               String
  userId               String
  role                 String           @default("MEMBER")
  joinedAt             DateTime         @default(now())
  leftAt               DateTime?
  isActive             Boolean          @default(true)
  permissions          String           @default("{\"sendMessages\": true, \"editInfo\": false, \"removeMembers\": false}")
  notificationSettings String           @default("{\"mute\": false, \"muteUntil\": null}")

  // Relations
  chat                 Chat             @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id                String      @id @default(cuid())
  chatId            String
  senderId          String?
  content           String?
  messageType       String      @default("TEXT")
  mediaUrl          String?
  replyToId         String?
  isEdited          Boolean     @default(false)
  isDeleted         Boolean     @default(false)
  deletedForEveryone Boolean    @default(false)
  editedAt          DateTime?
  deletedAt         DateTime?
  metadata          String      @default("{}")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  chat              Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender            User?       @relation(fields: [senderId], references: [id])
  replyTo           Message?    @relation("MessageReplies", fields: [replyToId], references: [id])
  replies           Message[]   @relation("MessageReplies")
  messageStatuses   MessageStatus[]
  messageReactions  MessageReaction[]
  mediaFiles        MediaFile[]

  @@map("messages")
}

model MessageStatus {
  id          String        @id @default(cuid())
  messageId   String
  userId      String
  status      String            @default("SENT")
  readAt      DateTime?
  deliveredAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  message     Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_status")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model UserRelationship {
  id                String             @id @default(cuid())
  userId            String
  relatedUserId     String
  relationshipType  String
  createdAt         DateTime           @default(now())

  // Relations
  user              User               @relation("UserRelationships", fields: [userId], references: [id], onDelete: Cascade)
  relatedUser       User               @relation("RelatedUserRelationships", fields: [relatedUserId], references: [id], onDelete: Cascade)

  @@unique([userId, relatedUserId, relationshipType])
  @@map("user_relationships")
}

model MediaFile {
  id               String           @id @default(cuid())
  messageId        String?
  fileName         String
  fileType         String
  mimeType         String
  fileSize         BigInt
  originalUrl      String
  thumbnailUrl     String?
  compressedUrl    String?
  previewUrl       String?
  duration         Int?
  width            Int?
  height           Int?
  metadata         String           @default("{}")
  processingStatus String           @default("PENDING")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  message          Message?         @relation(fields: [messageId], references: [id], onDelete: Cascade)
  processingJobs   FileProcessingJob[]

  @@map("media_files")
}

model FileProcessingJob {
  id           String           @id @default(cuid())
  mediaFileId  String?
  jobType      String
  status       String           @default("PENDING")
  inputData    String
  outputData   String?
  errorMessage String?
  retryCount   Int              @default(0)
  maxRetries   Int              @default(3)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  mediaFile    MediaFile?       @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)

  @@map("file_processing_jobs")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  type      String   // "EMAIL_VERIFICATION" or "PASSWORD_RESET"
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_tokens")
}
 